Command Line Interface (CLI) Library
====================================
NEXT VERSION

V2.9.0 - 2022-11-15
-------------------
CHANGE:
- PONRTSYS-11250: OMCI daemon restart triggers an IFXOS error message
  + Modification of thread priority removed
- PONRTSYS-10211: Use complete linking of libcli.so
  + This avoids the need of users to provide the library dependencies like ifxos,
    when linking against libcli.
- CURTSYS-4680: License updates
- Install documentation to /usr/share/doc/lib_cli/
- Install header files to /usr/include/cli/

V2.8.0 - 2017-07-12
-------------------
ADD:
- Compile switch CLI_SPECIAL_IO_FILE_TYPE to use with DMS project
- (DSLCPE_SW-951) Extend FAPI CLI interface to get access on single parameter base
  + Supported autogenerated CLI extensions for get, set, info functions
- Make cli_sscanf() handle 64 bit integers
- Added support for string width in format specifier in cli_sscanf
- Add cli_user_if_event and cli_user_if_dump for event and dump callbacks
CHANGE
- Change configure.in to configure.ac

FIX:
- cli_user_if_unregister returned ERROR even in case user interface was 
  successfully unregistered
- Fix command help for nested cli commands
  + In case of nested commands, e.g. command "top" on top-level and "sub" as sub-command of "top",
    the help of the sub-command is not show, as "top sub -h" is always triggering the help of "top".

V2.7.2 - 2015-05-13
-------------------
CHANGE:
- Clean-up Win32 build.
- XML parser: add unsigned char as simple type
ADD:
- Add Visual Studio 2012 build
- Visual Studio 2010 - add x64 build
- XML Parser: add functions for API tracer function generation
  - make_fct_in_dump_call_param_str
  - make_fct_in_printf_dump_parameter
  - make_fct_in_params
- Add VxWorks 6.6 build for MIPS
- Added VxWorks 6.6 for MIPS project files to distribution

V2.7.1 - 2013-09-03
-------------------
CHANGE:
- update CLI build and setup scripts
- CLI Console: command line read - handle also '\r'

V2.7.0 - 2013-06-28
-------------------
INTERFACE CHANGE:
- New cli_console_init_nb(): Allows to start a console with timeout.
FIX:
- Built-in "quit" cmd: if the user exit callback is called and if the user
  interface is unregistered within this call then the internal user list becomes
  broken. Fix: keep the list information while the user exit callback operation.
- Cleanup tab-completion
ADD:
- Compile switch to disable Auto Completion
- Console: add console non blocking mode.

V2.6.1 - 2013-05-29
-------------------
FIX:
- CLI Core: check help, help token also detected if it occurs in a argument string.
- fix built-in functions (cast to common file type definiton)

V2.6.0 - 2013-05-22
-------------------
INTERFACE CHANGE:
- Common: cleanup lib_cli_core.h
  - move CLI core context struct to internal
  - add common definition for type "file"
  - remove #if to make the header clean (interface header)
  - add define "CLI_CORE_INTERFACE_VERSION" to allow backward compatible implementation
- add new function:
  - cli_core_inst_num_get: returns the instance number of the given core
  - cli_core_num_of_clones_get: returns the number of registered clones (reference core)
- changed function:
  - cli console, make the console prompt set function generic.
  - add define "CLI_CONSOLE_HAVE_PROMPT_SET" to allow backward compatible implementation

V2.5.1 - 2013-05-10
-------------------
CHANGE:
- add eCos support
- removed line feeds & echos, needs further cleanup

V2.5.0 - 2013-05-10
-------------------
CHANGE:
- include ifxos termios header in CLI console so we have working history;
- add Ctrl-D support (alias to quit);
- add autocomplete support (set input to longest common sequence and print
  all matched commands);
- restore terminal (echo on, canonical mode) configuration on exit.
- use default terminal width (8) then TIOCGWINSZ returns 0
- pass empty commands
- add cli_cmd_name_get() routine so its possible for command handler to obtain
  name of the command that is being executed

V2.4.0 - 2012-12-03
-------------------
INTERFACE CHANGE:
- Add define "CLI_HAVE_MULTIPLE_INSTANCE_SUPPORT"
- Add new functions:
  + cli_core_clone(...)
  + cli_single_pipe_init(...)
ADD:
- Additional functions to setup multiple instances of a CLI
  + CLI Core: Clone function which allows to setup a CLI core based on a already
    existing CLI Core(re-use of the existing command search trees, group setup, etc).
  + CLI Pipe: Init function which allows the setup with a user given pipe number.

V2.3.1 - 2012-10-12
-------------------
FIX:
- Group Setup - remove limitation max num of user search keys
- Group Setup - group names and search keys are const
ADD:
- add docu (doxygen)

V2.3.0 - 2012-09-20
-------------------
CHANGE:
- cli_sscanf - default base = 0 for %d %u %i types
  Note: with this change, the tpye of the parameters is detected automatically
  0x... indication for 'HEX' value
  0... (leading "0") indication for 'OCT' value
- cleanup dependencies (for kernel build)

V2.2.1 - 2012-09-12
-------------------
FIX:
- CLI Pipe: check lock get (again, was lost with the merge in the last version)


V2.2.0 - 2012-09-11
-------------------
FIX:
- CLI Pipe: check lock get
- LINUX Kernel Module: fix kernel build
- IVE script: fix add key function call (cast)
- short sleep fixed in the cli_pipe_log_thread() by ifxos event object.

V2.1.0 - 2012-03-20
-------------------
FIX:
- call built-in cmds with context core (not with user data).
ADD:
- Group handling, allow to sort the commands into user defined groups.

V2.0.2 - 2012-02-10
-------------------
CHANGE:
- only use libtool, no manual definitions for libcli.a
- correct some comments
FIX:
- define lib_cli_config.h also as interface header
- duplicated short commands handling
- cli_pipe_init: return of context ptr was missing
ADD:
- return code IFX_SUCCESS in cli_autogen_commands_register() generation
- float type support for cli_sscanf()

V2.0.1 - 2012-02-08
-------------------
- Minor script changes
- compile fixes

V2.0.0 - 2012-01-31
-------------------
- First inital version of the new CLI lib
  - no global variables
  - no user dependencies
  - seperate pipe and console interface from the CLI core.
  - use binary tree for command handling
  - allocate tree nodes for all once at the beginning
  - support of 2 user interfaces:
    - print out via file (file descriptor, used for standard user space application)
    - print out via buffer (output buffer, used for driver application)
